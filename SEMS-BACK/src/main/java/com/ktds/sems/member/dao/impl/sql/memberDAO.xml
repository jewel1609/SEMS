<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		
<!-- 현재 articleDAO의 이름 앞에 첫 글자는 대문자로 적는다. 패키지의 일종이다 -->
<mapper namespace="MemberDAO">

	<!-- 로그인 -->
	<select id="isExistId" parameterType="string" resultType="string">
		SELECT	ID
		FROM	MBR
		WHERE	ID = #{id}
	</select>
	<select id="isAccountLock" parameterType="string" resultType="string">
		SELECT	IS_ACC_LCK
		FROM	MBR
		WHERE	ID = #{id}
	</select>
	<update id="loginSuccess" parameterType="string">
		UPDATE	MBR
		SET		LGI_F_CT = 0
				, IS_ACC_LCK = 'N'
				, LATEST_LGI_DT = SYSDATE
		WHERE	ID = #{id}
	</update>
	<select id="needToChangPassword" parameterType="string" resultType="string">
		SELECT	'Y'
		FROM	MBR
		WHERE	ID = #{id}
		AND		(SYSDATE - LATEST_LGI_DT) >= 30
	</select>
	<update id="plusLoginFailCount" parameterType="string">
		UPDATE	MBR
		SET		LGI_F_CT = LGI_F_CT + 1
				, LATEST_LGI_DT = SYSDATE
		WHERE	ID = #{id}
	</update>
	<update id="updateAccountLock" parameterType="string">
		UPDATE	MBR
		SET		IS_ACC_LCK = 'Y'
		WHERE	ID = #{id}
		AND		LGI_F_CT >= 5
	</update>
	<select id="getSaltById" parameterType="string" resultType="string">
		SELECT	SALT salt
		FROM	MBR
		WHERE	ID = #{ id }
	</select>
	<select id="login" parameterType="MemberVO" resultType="MemberVO">
		SELECT	ID id
				, PWD password
				, NM name
				, EMAIL email
				, HIGHEST_EDU_LV highestEducationLevel
				, UNIV_NM universityName
				, MJR_NM majorName
				, GRDT_TP graduationType
				, BRTH_DT birthDate
				, PHONE_NMB phoneNumber
				, MBR_TP memberType
				, SALT salt
				, LGI_F_CT loginFailCount
				, IS_ACC_LCK isAccountLock
				, TO_CHAR(LATEST_LGI_DT, 'YYYY-MM-DD') latestLoginDate
				, RSN_DT resignDate
				, RSN isResign
				, MDF_F_CT modifyFailCount
				, IS_MDF_LCK isModifyLock
		FROM	MBR
		WHERE	ID = #{id}
		AND		PWD = #{password}
	</select>
	<select id="isResign" parameterType="string" resultType="string">
		SELECT	ID
		FROM	MBR
		WHERE	ID = #{id}
		AND		RSN = 'Y'
	</select>
	<insert id="stampLoginTime" parameterType="LoginHistoryVO">

		INSERT INTO LGI_HTR	(
								LGI_HTR_ID
								, MBR_ID
								, LGI_IP
								, LGI_DT
							) 
		VALUES				(
								#{ lgiHtrId }
								, #{ id }
								, #{ lgiIp }
								, SYSDATE
		 					)
	</insert>
	<select id="nextLoginHistorySeq" resultType="_int">
		SELECT	LGI_HTR_ID_SEQ.NEXTVAL
		FROM	DUAL
	</select>
	<update id="stampLogoutTime" parameterType="LoginHistoryVO">
		UPDATE	LGI_HTR	
		SET		LGO_DT = SYSDATE
		WHERE	LGI_HTR_ID = #{lgiHtrId}
	</update>
	
	<select id="getTotalMemberCount">
		SELECT 	COUNT(ID)
		FROM	MBR
	</select>
	
	<select id="getAllMemberList" parameterType="MemberSearchVO" resultType="MemberVO">
		SELECT	MBR.ID id
				, MBR.PWD password
				, MBR.NM name
				, MBR.EMAIL email
				, MBR.HIGHEST_EDU_LV highestEducationLevel
				, MBR.UNIV_NM universityName
				, MBR.MJR_NM majorName
				, MBR.GRDT_TP graduationType
				, MBR.BRTH_DT birthDate
				, MBR.PHONE_NMB phoneNumber
				, MBR.MBR_TP memberType
				, MBR.LGI_F_FC loginFailCount
				, MBR.IS_ACC_LCK isAccountLock
				, MBR.LATEST_LGI_DT latestLoginDate
				, MBR.RSN_DT resignDate
				, MBR.RSN isResign
				, MBR.MDF_F_CT modifyFailCount
				, MBR.IS_MDF_LCK isModifyLock
		FROM	(
					SELECT	ROWNUM AS RNUM
							, MBR_INFO.*
					FROM	(
								SELECT	*
								FROM	MBR
								ORDER	BY ID DESC
							) MBR_INFO
					WHERE	ROWNUM <![CDATA[<=]]> #{endIndex}
				) MBR
		WHERE	RNUM >= #{startIndex}		
	</select>
	
	
	
	<select id="isExistEmail" parameterType="string" resultType="string">
		SELECT	ID
		FROM	MBR
		WHERE	EMAIL = #{email}
	</select>
	
</mapper>