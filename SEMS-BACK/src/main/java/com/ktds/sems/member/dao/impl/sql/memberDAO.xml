<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		
<!-- 현재 articleDAO의 이름 앞에 첫 글자는 대문자로 적는다. 패키지의 일종이다 -->
<mapper namespace="MemberDAO">

	<!-- 로그인 -->
	<select id="isExistId" parameterType="string" resultType="string">
		SELECT	ID
		FROM	MBR
		WHERE	ID = #{id}
	</select>
	<select id="isAccountLock" parameterType="string" resultType="string">
		SELECT	IS_ACC_LCK
		FROM	MBR
		WHERE	ID = #{id}
	</select>
	<update id="loginSuccess" parameterType="string">
		UPDATE	MBR
		SET		LGI_F_CT = 0
				, IS_ACC_LCK = 'N'
				, LATEST_LGI_DT = SYSDATE
		WHERE	ID = #{id}
	</update>
	<select id="needToChangPassword" parameterType="string" resultType="string">
		SELECT	'Y'
		FROM	MBR
		WHERE	ID = #{id}
		AND		(SYSDATE - LATEST_LGI_DT) >= 30
	</select>
	<update id="plusLoginFailCount" parameterType="string">
		UPDATE	MBR
		SET		LGI_F_CT = LGI_F_CT + 1
				, LATEST_LGI_DT = SYSDATE
		WHERE	ID = #{id}
	</update>
	<update id="updateAccountLock" parameterType="string">
		UPDATE	MBR
		SET		IS_ACC_LCK = 'Y'
		WHERE	ID = #{id}
		AND		LGI_F_CT >= 5
	</update>
	<select id="getSaltById" parameterType="string" resultType="string">
		SELECT	SALT salt
		FROM	MBR
		WHERE	ID = #{ id }
	</select>
	<select id="login" parameterType="MemberVO" resultType="MemberVO">
		SELECT	ID id
				, PWD password
				, NM name
				, EMAIL email
				, HIGHEST_EDU_LV highestEducationLevel
				, UNIV_NM universityName
				, MJR_NM majorName
				, GRDT_TP graduationType
				, BRTH_DT birthDate
				, PHONE_NMB phoneNumber
				, MBR_TP memberType
				, SALT salt
				, LGI_F_CT loginFailCount
				, IS_ACC_LCK isAccountLock
				, TO_CHAR(LATEST_LGI_DT, 'YYYY-MM-DD') latestLoginDate
				, RSN_DT resignDate
				, RSN isResign
				, MDF_F_CT modifyFailCount
				, IS_MDF_LCK isModifyLock
		FROM	MBR
		WHERE	ID = #{id}
		AND		PWD = #{password}
	</select>
	<select id="isResign" parameterType="string" resultType="string">
		SELECT	ID
		FROM	MBR
		WHERE	ID = #{id}
		AND		RSN = 'Y'
	</select>
	<insert id="stampLoginTime" parameterType="LoginHistoryVO">

		INSERT INTO LGI_HTR	(
								LGI_HTR_ID
								, MBR_ID
								, LGI_IP
								, LGI_DT
							) 
		VALUES				(
								#{ lgiHtrId }
								, #{ id }
								, #{ lgiIp }
								, SYSDATE
		 					)
	</insert>
	<select id="nextLoginHistorySeq" resultType="_int">
		SELECT	LGI_HTR_ID_SEQ.NEXTVAL
		FROM	DUAL
	</select>
	<update id="stampLogoutTime" parameterType="LoginHistoryVO">
		UPDATE	LGI_HTR	
		SET		LGO_DT = SYSDATE
		WHERE	LGI_HTR_ID = #{lgiHtrId}
	</update>
	  
	<select id="getAllMemberHistory" parameterType="LoginHistorySearchVO" resultType="LoginHistoryVO">
		 SELECT HIS.LGI_HTR_ID lgiHtrId
		 		, HIS.LGI_IP lgiIp
		 		, HIS.LGI_DT lgiDt
		 		, HIS.LGO_DT lgoDt
		 		, HIS.MBR_ID id
		 		, HIS.CD_NM memberType
	     FROM 	(
	             SELECT ROWNUM AS RNUM
	              ,LGI.*
	          FROM   (
	                         SELECT   LGI_HTR.*
	                        FROM   (
	                                  SELECT  LGI_HTR.*, MBR_TP.CD_NM
	                                  FROM   LGI_HTR, MBR, MBR_TP
	                                  WHERE   MBR.MBR_TP = MBR_TP.CD_ID
	                                  AND     LGI_HTR.MBR_ID = MBR.ID
	                                  )LGI_HTR 
	                        WHERE   MBR_ID IN (
	                                    SELECT   ID
	                                    FROM   MBR
	                                    WHERE   MBR_TP != 'ADM'
	                                    )
	                        ORDER   BY   LGI_HTR_ID  DESC
	                )    LGI
	             WHERE   ROWNUM <![CDATA[<=]]> #{endIndex}
	        ) HIS
	        WHERE   RNUM >= #{startIndex}   
	</select>
	
	<select id="getTotalMemberHistoryCount" resultType="_int">
		SELECT	COUNT(LGI_HTR_ID)
		FROM	(
                SELECT  LGI_HTR.*, MBR_TP.CD_NM
                FROM   LGI_HTR, MBR, MBR_TP
                WHERE   MBR.MBR_TP = MBR_TP.CD_ID
                AND     LGI_HTR.MBR_ID = MBR.ID
                )LGI_HTR   
		WHERE	MBR_ID IN (
						SELECT	ID
						FROM	MBR
						WHERE	MBR_TP != 'ADM'
						)
		ORDER	BY	LGI_HTR_ID  DESC
	</select>
	
	<select id="getTotalMemberCount" resultType="_int">
		SELECT 	COUNT(ID)
		FROM	MBR
	</select>
	
	<select id="getAllMemberList" parameterType="MemberSearchVO" resultType="MemberVO">
		SELECT	MBR.ID id
				, MBR.NM name
				, MBR_TP.CD_NM memberType
				, MBR.IS_ACC_LCK isAccountLock
				, MBR.RSN isResign
				, MBR.IS_MDF_LCK isModifyLock
		FROM	(
					SELECT	ROWNUM AS RNUM
							, MBR_INFO.*
					FROM	(
								SELECT	*
								FROM	MBR
								ORDER	BY ID DESC
							) MBR_INFO
					WHERE	ROWNUM <![CDATA[<=]]> #{endIndex}
				) MBR
				, MBR_TP
		WHERE	MBR.MBR_TP = MBR_TP.CD_ID
		AND		RNUM >= #{startIndex}		
	</select>
	
	<select id="isExistEmail" parameterType="string" resultType="string">
		SELECT	ID
		FROM	MBR
		WHERE	EMAIL = #{email}
	</select>
	
	<select id="getMemberDetailById" parameterType="string" resultType="MemberVO">
		SELECT	ID id
				, PWD password
				, NM name
				, EMAIL email
				, HIGHEST_EDU_LV.CD_NM highestEducationLevel
				, UNIV_NM universityName
				, MJR_NM majorName
				, GRDT_TP.CD_NM graduationType
				, BRTH_DT birthDate
				, PHONE_NMB phoneNumber
				, MBR_TP.CD_NM memberType
				, SALT salt
				, LGI_F_CT loginFailCount
				, IS_ACC_LCK isAccountLock
				, LATEST_LGI_DT latestLoginDate
				, RSN_DT resignDate
				, RSN isResign
				, MDF_F_CT modifyFailCount
				, IS_MDF_LCK isModifyLock
		FROM	MBR
				, HIGHEST_EDU_LV
				, GRDT_TP
				, MBR_TP
		WHERE	MBR.HIGHEST_EDU_LV = HIGHEST_EDU_LV.CD_ID
		AND		MBR.GRDT_TP = GRDT_TP.CD_ID
		AND		MBR.MBR_TP = MBR_TP.CD_ID
		AND		ID = #{id}
	</select>
	
	<select id="getHighestEducationLevelCodeNames" resultType="string">
		SELECT	CD_NM cdNm
		FROM	HIGHEST_EDU_LV
	</select>
	
	<select id="getGraduationType" resultType="string">
		SELECT	CD_NM cdNm	
		FROM	GRDT_TP
	</select>
	
	<insert id="addNewMember" parameterType="MemberVO">
		INSERT INTO MBR	(
							ID
							, PWD
							, NM
							, EMAIL
							<if test="memberType == 'MBR' or memberType == 'STD'">
							, HIGHEST_EDU_LV
							, UNIV_NM
							, MJR_NM
							, GRDT_TP
							</if>
							, BRTH_DT
							, PHONE_NMB
							, MBR_TP
							, SALT
							, LATEST_LGI_DT
						)
		VALUES 			( 
							#{id}
							, #{password}
							, #{name}
							, #{email}
							<if test="memberType == 'MBR' or memberType == 'STD'">
							, #{highestEducationLevel}
							, #{universityName}
							, #{majorName}
							, #{graduationType}
							</if>
							, #{birthDate}
							, #{phoneNumber}
							, #{memberType}
							, #{salt}
							, SYSDATE
						)
	</insert>
	
	<select id="getHelCodeId" parameterType="string" resultType="string">
		SELECT	CD_ID cdId
		FROM	HIGHEST_EDU_LV
		WHERE	CD_NM = #{cdNm}
	</select>
	
	<select id="getGraduationTypeCodeId" parameterType="string" resultType="string">
		SELECT	CD_ID cdId
		FROM	GRDT_TP
		WHERE	CD_NM = #{cdNm}
	</select>
	
	<select id="getMemberTypeCodeNameList" resultType="string">
		SELECT	CD_NM cdNm
		FROM	MBR_TP
	</select>
	
	<select id="getMemberTypeCodeId" parameterType="string" resultType="string">
		SELECT	CD_ID cdId
		FROM	MBR_TP
		WHERE	CD_NM = #{cdNm}
	</select>
	
	<delete id="massiveDeleteMember" parameterType="string">
		DELETE
		FROM	MBR
		WHERE	ID = #{memberId}
	</delete>
	
</mapper>