<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="EducationDAO" >
	<select id="getTotalEducationCount" resultType="_int">
		SELECT	COUNT(EDU_ID)
		FROM	EDU_INFO
	</select>
<!-- 	<select id="getSearchedEducationCount" parameterType="map" resultType="_int" >
		SELECT	COUNT(*)
		FROM	EDU_INFO
		WHERE 	EDU_TTL = #{educationVO.educationTitle} 
	</select> -->
	<select id="getSearchedEducationCount" parameterType="EducationVO" resultType="_int" >
			SELECT	COUNT(*)
			FROM	EDU_INFO
			WHERE	1 = 1
			<!--
			<if test="startDate != null">
	           AND TO_CHAR(SYSDATE, 'YYYY/MM') <![CDATA[ >= ]]> #{startDate} 
	           AND TO_CHAR(SYSDATE, 'YYYY/MM') <![CDATA[ <= ]]> #{endDate}
	        </if>
	        <if test="cost != null">
	           AND COST = #{cost} 
	        </if>
		    <if test="educationType != null">
		           AND EDU_TP = #{educationType} 
	        </if> 
	  		 -->	     
 		   <if test="educationTitle != null">
	           AND EDU_TTL = #{educationTitle}
           </if>
	</select> 
	
	<select id="getOneEducationDetail" parameterType="string" resultType="EducationVO">
	SELECT	EDU_ID educationId
				, EDU_CTGR educationCategory
				, EDU_TTL educationTitle
				, MBR_ID memberId
				, MAX_MBR maxMember
				, EDU_LOC educationLocation
				, EDU_CLCM educationCurriculum
				, EDU_INTR educationIntroduce
				, SRT_DATE startDate
				, END_DATE endDate
				, START_TM startTime
				, END_TM endTime
				, EDU_TP educationType
				, COST cost
		FROM	EDU_INFO
		WHERE	EDU_ID LIKE #{educationId}
	</select>
	
	
	<select id="getAllCommentByEducationId" parameterType="string" resultType="QNAVO">
		SELECT	REPLY_ID replyId
				, EDU_ID eduId
				, PARENT_REPLY_ID parentReplyId
				, ORDER_NO orderNo
				, DESCRIPTION description
				, MBR_ID mbrId
				, LIKE_CNT likeCnt
				, DISLIKE_CNT dislikeCnt
				, CREATED_DATE createdDate
		FROM 	QNA
		WHERE	EDU_ID LIKE #{educationId}
	</select>
	
	<select id="getAllEducationList" parameterType="EducationSearchVO" resultType="EducationVO">
		SELECT	EDU_ID educationId
				, EDU_CTGR educationCategory
				, EDU_TTL educationTitle
				, MBR_ID memberId
				, MAX_MBR maxMember
				, EDU_LOC educationLocation
				, EDU_CLCM educationCurriculum
				, EDU_INTR educationIntroduce
				, SRT_DATE startDate
				, END_DATE endDate
				, START_TM startTime
				, END_TM endTime
				, EDU_TP educationType
				, COST cost
		FROM	(
					SELECT	ROWNUM AS RNUM
							, EDU_INFO.*
					FROM	(
								SELECT	*
								FROM	EDU_INFO
								ORDER	BY EDU_ID DESC
							) EDU_INFO
					WHERE	ROWNUM <![CDATA[<=]]> #{endIndex}
				)
		WHERE	RNUM >= #{startIndex}		
	</select>


	<select id="doSearchList" parameterType="map" resultType="EducationVO">
	   SELECT   EDU_ID educationId
	            , EDU_CTGR educationCategory
	            , EDU_TTL educationTitle
	            , MBR_ID memberId
	            , MAX_MBR maxMember
	            , EDU_LOC educationLocation
	            , EDU_CLCM educationCurriculum
	            , EDU_INTR educationIntroduce
	            , SRT_DATE startDate
	            , END_DATE endDate
	            , START_TM startTime
	            , END_TM endTime
	            , EDU_TP educationType
	            , COST cost
         FROM   (
               SELECT   ROWNUM   AS RNUM
                     , EDU_INFO.*
               FROM   (
                        SELECT   *
                        FROM   EDU_INFO
                        WHERE  1=1	 
                        <if test="educationVO.educationTitle != null">
			             AND EDU_TTL = #{educationVO.educationTitle}
			          	</if>
                        ORDER   BY EDU_ID DESC
                     ) EDU_INFO
               WHERE   ROWNUM <![CDATA[<=]]> #{searchVO.endIndex}
            )
      WHERE   RNUM >= #{searchVO.startIndex}
      <!-- 
         <if test="startDate != null">
             AND TO_CHAR(SRT_DATE, 'YYYY/MM') <![CDATA[ >= ]]> #{startDate} 
             AND TO_CHAR(SRT_DATE, 'YYYY/MM') <![CDATA[ <= ]]> #{endDate}
          </if>
          <if test="cost != null">
             AND COST = #{cost} 
          </if>
          <if test="educationType != null">
             AND EDU_TP = #{educationType} 
          </if>
           -->
    </select>
<!--    
    <select id="doSearchList" parameterType="map" resultType="EducationVO">
		   SELECT   EDU_ID educationId
		            , EDU_CTGR educationCategory
		            , EDU_TTL educationTitle
		            , MBR_ID memberId
		            , MAX_MBR maxMember
		            , EDU_LOC educationLocation
		            , EDU_CLCM educationCurriculum
		            , EDU_INTR educationIntroduce
		            , SRT_DATE startDate
		            , END_DATE endDate
		            , START_TM startTime
		            , END_TM endTime
		            , EDU_TP educationType
		            , COST cost
	         FROM  EDU_INFO
		     WHERE  1 = 1 
        
         <if test="startDate != null">
             AND TO_CHAR(SRT_DATE, 'YYYY/MM') <![CDATA[ >= ]]> #{startDate} 
             AND TO_CHAR(SRT_DATE, 'YYYY/MM') <![CDATA[ <= ]]> #{endDate}
          </if>
          <if test="cost != null">
             AND COST = #{cost} 
          </if>
          <if test="educationType != null">
             AND EDU_TP = #{educationType} 
          </if> 
         
         <if test="educationVO.educationTitle != null">
       	   AND EDU_TTL = #{educationVO.educationTitle}
          </if>
    </select>
 -->    
 <insert id="insertNewComment" parameterType="QNAVO">
						
			INSERT INTO SEMS.QNA (
								   REPLY_ID 
								   , EDU_ID 
								   , PARENT_REPLY_ID 
								   , ORDER_NO 
								   , DESCRIPTION 
								   , MBR_ID 
								   , CREATED_DATE
								   ) 
						VALUES ( #{replyId} ,
								#{eduId},
								'c',
								'4',
								 #{description},
								 'f',
								 SYSDATE
								 )			
 	</insert>
 	
 		<delete id="doCancelEducation" parameterType="string">
		DELETE	
		FROM	EDU_INFO
		WHERE	EDU_ID = #{educationId}
	</delete>
    
</mapper>
