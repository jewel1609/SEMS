<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MemberDAO">
	<select id="getNowDate">
		SELECT	TO_CHAR(SYSDATE, 'YYYY-MM-DD')
		FROM	DUAL
	</select>
	
	<insert id="addNewMember" parameterType="MemberVO">
		INSERT INTO MBR	(
							ID
							, PWD
							, NM
							, EMAIL
							<if test="memberType == 'MBR'">
							, HIGHEST_EDU_LV
							, UNIV_NM
							, MJR_NM
							, GRDT_TP
							</if>
							, BRTH_DT
							, PHONE_NMB
							, MBR_TP
							, SALT
							, LATEST_LGI_DT
						)
		VALUES 			( 
							#{id}
							, #{password}
							, #{name}
							, #{email}
							<if test="memberType == 'MBR'">
							, #{highestEducationLevel}
							, #{universityName}
							, #{majorName}
							, #{graduationType}
							</if>
							, #{birthDate}
							, #{phoneNumber}
							, #{memberType}
							, #{salt}
							, SYSDATE
						)
	</insert>
	
	<update id="insertUuidForResign" parameterType="MemberVO">
		UPDATE	MBR
		SET		UUID = #{uuid}
		WHERE	ID = #{id}
	</update>
	
	<update id="doDeleteMember" parameterType="string">
		UPDATE	MBR
		SET		RSN = 'Y'
				, RSN_DT = SYSDATE
		WHERE	ID = #{id}
	</update>
	
	<select id="getSaltById" parameterType="string" resultType="string">
		SELECT	SALT salt
		FROM	MBR
		WHERE	ID = #{ id }
	</select>
	
	<select id="getPasswordById" parameterType="string" resultType="string">
		SELECT	PWD password
		FROM	MBR
		WHERE	ID = #{id}
	</select>
	
	<select id="login" parameterType="MemberVO" resultType="MemberVO">
		SELECT	ID id
				, PWD password
				, NM name
				, EMAIL email
				, HIGHEST_EDU_LV highestEducationLevel
				, UNIV_NM universityName
				, MJR_NM majorName
				, GRDT_TP graduationType
				, BRTH_DT birthDate
				, PHONE_NMB phoneNumber
				, MBR_TP memberType
				, SALT salt
				, LGI_F_CT loginFailCount
				, IS_ACC_LCK isAccountLock
				, TO_CHAR(LATEST_LGI_DT, 'YYYY-MM-DD') latestLoginDate
				, RSN_DT resignDate
				, RSN isResign
				, MDF_F_CT modifyFailCount
				, IS_MDF_LCK isModifyLock
				, UUID uuid
		FROM	MBR
		WHERE	ID = #{id}
		AND		PWD = #{password}
	</select>
	<select id="isAccountLock" parameterType="string" resultType="string">
		SELECT	IS_ACC_LCK
		FROM	MBR
		WHERE	ID = #{id}
	</select>

	<select id="isExistId" parameterType="string" resultType="string">
		SELECT	ID
		FROM	MBR
		WHERE	ID = #{id}
	</select>
	<select id="isResign" parameterType="string" resultType="string">
		SELECT	ID
		FROM	MBR
		WHERE	ID = #{id}
		AND		RSN = 'Y'
	</select>

	<insert id="stampLoginTime" parameterType="LoginHistoryVO">

		INSERT INTO LGI_HTR	(
								LGI_HTR_ID
								, MBR_ID
								, LGI_IP
								, LGI_DT
							) 
		VALUES				(
								#{ lgiHtrId }
								, #{ id }
								, #{ lgiIp }
								, SYSDATE
		 					)
	</insert>
	<select id="nextLoginHistorySeq" resultType="_int">
		SELECT	LGI_HTR_ID_SEQ.NEXTVAL
		FROM	DUAL
	</select>
	<update id="stampLogoutTime" parameterType="LoginHistoryVO">
		UPDATE	LGI_HTR	
		SET		LGO_DT = SYSDATE
		WHERE	LGI_HTR_ID = #{lgiHtrId}
	</update>
	
	<update id="stampLogoutTimeByMemberId" parameterType="string">
		UPDATE	LGI_HTR	
		SET		LGO_DT = SYSDATE
		WHERE	LGI_HTR_ID = 	(
									SELECT 	MAX(LGI_HTR_ID)
									FROM	LGI_HTR
									WHERE	MBR_ID = #{memberId}
								)
	</update>
	
	<select id="saveLoginHistoryAsExcel" resultType="LoginHistoryVO" parameterType="string">
		SELECT	LGI_HTR_ID lgiHtrId
				, MBR_ID id
				, LGI_IP lgiIp
				, LGI_DT lgiDt
				, LGO_DT lgoDt
		FROM	LGI_HTR
		WHERE	MBR_ID = #{memberId}
		ORDER	BY LGI_HTR_ID ASC
	</select>
	<update id="loginSuccess" parameterType="string">
		UPDATE	MBR
		SET		LGI_F_CT = 0
				, IS_ACC_LCK = 'N'
				, LATEST_LGI_DT = SYSDATE
		WHERE	ID = #{id}
	</update>
	<update id="plusLoginFailCount" parameterType="string">
		UPDATE	MBR
		SET		LGI_F_CT = LGI_F_CT + 1
				, LATEST_LGI_DT = SYSDATE
		WHERE	ID = #{id}
	</update>
	<update id="updateAccountLock" parameterType="string">
		UPDATE	MBR
		SET		IS_ACC_LCK = 'Y'
		WHERE	ID = #{id}
		AND		LGI_F_CT >= 5
	</update>
	
	<select id="getOneMember" parameterType="string" resultType="MemberVO">
		SELECT	ID id
				, PWD password 
				, NM name
				, EMAIL email
				, HIGHEST_EDU_LV highestEducationLevel
				, UNIV_NM universityName
				, MJR_NM majorName
				, GRDT_TP graduationType
				, BRTH_DT birthDate
				, PHONE_NMB phoneNumber
				, MBR_TP memberType
				, UUID uuid
		FROM	MBR
		WHERE	ID = #{id}
	</select>
	<update id="resetModifyLockAndCount" parameterType="string">
		UPDATE	MBR
		SET		MDF_F_CT = 0
				, IS_MDF_LCK = 'N'
		WHERE  ID  = #{id}
	</update>
	<update id="plusModifyFailCount" parameterType="string">
		UPDATE	MBR
		SET		MDF_F_CT = MDF_F_CT + 1
		WHERE	ID = #{id}
	</update>
	<update id="updateModifyAccountLock" parameterType="string">
		UPDATE	MBR
		SET		IS_MDF_LCK = 'Y'
		WHERE	ID = #{id}
		AND		MDF_F_CT <![CDATA[>=]]> 3
	</update>
	<select id="isModifyAccountLock" parameterType="string" resultType="_int">
		SELECT	COUNT(IS_MDF_LCK)
		FROM	MBR
		WHERE	ID = #{id}
		AND		IS_MDF_LCK = 'Y'
	</select>
	<select id="needToChangPassword" parameterType="string" resultType="string">
		SELECT	'Y'
		FROM	MBR
		WHERE	ID = #{id}
		AND		(SYSDATE - LATEST_LGI_DT) >= 30
	</select>
	<select id="getTotalLoginHistoryCount" parameterType="LoginHistorySearchVO" resultType="_int">
		SELECT	COUNT(LGI_HTR_ID)
		FROM	LGI_HTR
		WHERE	MBR_ID = #{id}
		<if test="beginDate != null and beginDate != '' ">
		AND		LGI_DT <![CDATA[>=]]> TO_DATE(#{beginDate}, 'YYYY-MM-DD')		
		AND		LGI_DT <![CDATA[<=]]> (TO_DATE(#{closeDate}, 'YYYY-MM-DD') + 1)
		</if>
	</select>
	<select id="getAllLoginHistory" parameterType="LoginHistorySearchVO" resultType="LoginHistoryVO">
		SELECT	LGI_HTR_ID lgiHtrId
				, MBR_ID id
				, LGI_IP lgiIp
				,LGI_DT lgiDt
				, LGO_DT lgoDt
				, IS_REQ isReq
				, CHK_CNT chkCnt
		FROM	(
					SELECT	ROWNUM AS RNUM
							, LOGIN_HISTORY.*
					FROM	(
								SELECT	*
								FROM	LGI_HTR
								WHERE	MBR_ID = #{id}
								<if test="beginDate != null and beginDate != '' ">
								AND		LGI_DT <![CDATA[>=]]> TO_DATE(#{beginDate}, 'YYYY-MM-DD')		
								AND		LGI_DT <![CDATA[<=]]> (TO_DATE(#{closeDate}, 'YYYY-MM-DD') + 1)
								</if>								
								ORDER BY LGI_HTR_ID DESC
							) LOGIN_HISTORY
					WHERE	ROWNUM <![CDATA[<=]]> #{endIndex}
				)
		WHERE	RNUM <![CDATA[>=]]> #{startIndex}
	</select>
	
	<update id="modifyMemberInfo" parameterType="MemberVO" >
		UPDATE	MBR
		<set>
				<if test="name != null">
				NM = #{name},
				</if>
				<if test="password != null">
				PWD = #{password},
				</if>
				<if test="email != null">
				EMAIL = #{email},
				</if>
				<if test="highestEducationLevel != null">
				HIGHEST_EDU_LV = #{highestEducationLevel},
				</if>
				<if test="graduationType != null">
				GRDT_TP = #{graduationType},
				</if>
				<if test="birthDate != null">
				BRTH_DT = #{birthDate},
				</if>
				<if test="phoneNumber != null">
				PHONE_NMB = #{phoneNumber},
				</if>
				<if test="salt != null">
				SALT = #{salt},
				</if>
		</set>
		WHERE	ID = #{id}
	</update>
	
	<select id="getGraduationType" resultType="string">
		SELECT	CD_NM cdNm	
		FROM	GRDT_TP
	</select>
	
	<select id="getHighestEducationLevelCodeNames" resultType="string">
		SELECT	CD_NM cdNm
		FROM	HIGHEST_EDU_LV
	</select>
	
	<select id="getEduListByMember" parameterType="MemberVO" resultType="EducationVO">
		SELECT	E_I.EDU_ID educationId
				, EDU_CTGR educationCategory
				, EDU_TTL educationTitle
				, E_I.MBR_ID memberId 
				, MAX_MBR maxMember
				, EDU_LOC educationLocation
				, EDU_CLCM educationCurriculum
				, EDU_INTR educationIntroduce
				, SRT_DATE startDate
				, END_DATE endDate
				, START_TM startTime
				, END_TM endTime
				, EDU_TP educationType
				, COST cost
		FROM	EDU_INFO E_I, EDU_HTR E_H
		WHERE   E_I.EDU_ID = E_H.EDU_ID
		AND		E_H.MBR_ID = #{id}
		AND     E_H.STAT = 'JOIN_CMPL'
	</select>
	
	<insert id="insertAttendByMember" parameterType="AttendVO">
		INSERT INTO ATD (
   							ID
   							, MBR_ID
   							, ATD_TM
   							, EDU_ID
   						) 
				VALUES 	( 
							ATD_ID_SEQ.NEXTVAL
							, #{memberId}
				 			, #{attendTime}
				 			, #{educationId}
				  		)
	</insert>
	
	<select id="getLastDate" parameterType="map" resultType="string">
		SELECT	*
		FROM	(
		            SELECT  SUBSTR(ATD_TM, 1,10) ATD1
		            FROM    ATD
		            WHERE	MBR_ID = #{memberId}
		            AND		EDU_ID = #{educationId}
		            ORDER	BY ATD1 DESC
		        )
		WHERE  ROWNUM = 1
	</select>
	
	
	<select id="selectedGraduationTypeCodeName" parameterType="string" resultType="string">
		SELECT	CD_NM cdNm
		FROM	MBR
				, GRDT_TP
		WHERE	MBR.GRDT_TP = GRDT_TP.CD_ID
		AND		ID = #{id}
	</select>
	
	<select id="getSelectedHighestEducationLevelCodeName" parameterType="string" resultType="string">
		SELECT	CD_NM cdNm
		FROM	MBR M
				, HIGHEST_EDU_LV H
		WHERE	M.HIGHEST_EDU_LV = H.CD_ID
		AND		ID = #{id}
	</select>
	
	<select id="memberTypeCodeName" parameterType="string" resultType="string">
		SELECT	CD_NM cdNm
		FROM	MBR M
				, MBR_TP MT
		WHERE	M.MBR_TP = MT.CD_ID
		AND		ID = #{id}
	</select>
	
	<select id="getGraduationTypeCodeId" parameterType="string" resultType="string">
		SELECT	CD_ID cdId
		FROM	GRDT_TP
		WHERE	CD_NM = #{cdNm}
	</select>
	<select id="gethelCodeId" parameterType="string" resultType="string">
		SELECT	CD_ID cdId
		FROM	HIGHEST_EDU_LV
		WHERE	CD_NM = #{cdNm}
	</select>
	<select id="isExistEmail" parameterType="string" resultType="string">
		SELECT	ID
		FROM	MBR
		WHERE	EMAIL = #{email}
	</select>
	
	<select id="getMenuCategoryList" resultType="MenuManageVO" >
		SELECT 	CD_ID codeId
				, CD_NM codeName
				, URL url
				, SRT sort
		FROM 	MENU_MNG
		ORDER 	BY SRT
	</select>
	
	<update id="changePassword" parameterType="MemberVO">
		UPDATE	MBR
		SET		SALT = #{salt}
				, PWD = #{password}
				, LATEST_LGI_DT = SYSDATE
		WHERE	ID = #{id}
	</update>	
	
	<select id="isTeacher" parameterType="string" resultType="_int">
		SELECT	COUNT(ID)
		FROM	MBR
		WHERE	ID = #{id}
		AND		MBR_TP = 'TR'
	</select>
	
	<delete id="delectJunitTestMember" parameterType="string">
		DELETE
		FROM	MBR
		WHERE	ID = #{id}
	</delete>
	<select id="doMatchHistoryWithMember" parameterType="LoginHistoryVO" resultType="string">
		SELECT	'Y'
		FROM	LGI_HTR
		WHERE	LGI_HTR_ID = #{lgiHtrId}
		AND		MBR_ID = #{id}
	</select>
	<update id="doRequestIpHistory" parameterType="_int">
		UPDATE	LGI_HTR 
		SET		IS_REQ = 'Y'
		WHERE  	LGI_HTR_ID = #{lgiHtrId}
	</update>
	
	
	<select id="getTotalEducationHistoryCountById" parameterType="string" resultType="_int">
		SELECT	COUNT(EDU_HTR_ID)
		FROM	EDU_HTR
		WHERE	MBR_ID = #{id}
	</select>
	
	<select id="getAllEducationHistoryListByIdWithPaging" parameterType="EducationHistorySearchVO" resultType="EducationHistoryVO">
		SELECT	EH.EDU_HTR_ID educationHistoryId
				, EH.EDU_ID educationId
				, EH.MBR_ID memberId
				, EH.EDU_HTR_DT educationHistoryDate
				, EH.STAT state
				, EH.IP ip
				, EH.CMNT cmnt
				, EH.FDBK fdbk
				, EI.EDU_TTL educationTitle
				, EI.COST cost
				, EI.SRT_DATE startDate
				, EI.END_DATE endDate
		FROM	EDU_INFO EI
				, (
					SELECT	ROWNUM AS RNUM
							, EDUCATION_HISTORY.*
					FROM	(
								SELECT	*
								FROM	EDU_HTR
								WHERE	MBR_ID = #{memberId}
								ORDER BY EDU_HTR_ID DESC
							) EDUCATION_HISTORY
					WHERE	ROWNUM <![CDATA[<=]]> #{endIndex}
				) EH
		WHERE	RNUM <![CDATA[>=]]> #{startIndex}
		AND		EI.EDU_ID = EH.EDU_ID
	</select>
	<select id="doCheckIp" parameterType="LoginHistoryVO" resultType="_int">
		SELECT	'1'
		FROM	LGI_HTR
		WHERE	LGI_HTR_ID = #{lgiHtrId}
		AND		MBR_ID = #{id}
	</select>
	
	<select id="checkIpInfo" parameterType="LoginHistoryVO" resultType="LoginHistoryVO">
		SELECT	LGI_HTR_ID lgiHtrId
				, MBR_ID id
				, LGI_IP lgiIp
				, CHK_CNT chkCnt
				,LGI_DT lgiDt
				, LGO_DT lgoDt
		FROM	LGI_HTR
		WHERE	LGI_HTR_ID = #{lgiHtrId}
		AND		MBR_ID = #{id}
	</select>
	
	<select id="getAllEducationHistoryListById" parameterType="string" resultType="EducationHistoryVO">
		SELECT	EH.EDU_HTR_ID educationHistoryId
				, EH.EDU_ID educationId
				, EH.MBR_ID memberId
				, EH.EDU_HTR_DT educationHistoryDate
				, EH.STAT state
				, EH.IP ip
				, EH.CMNT cmnt
				, EH.FDBK fdbk
				, EI.EDU_TTL educationTitle
				, EI.COST cost
				, EI.SRT_DATE startDate
				, EI.END_DATE endDate
		FROM	EDU_INFO EI
				, EDU_HTR EH
		WHERE	EI.EDU_ID = EH.EDU_ID
		AND		EH.MBR_ID = #{id}
	</select>
	
	<update id="ipCheckCountUpdate" parameterType="LoginHistoryVO">
		UPDATE	LGI_HTR
		SET		CHK_CNT	= 0
				, IS_REQ = ''
		WHERE	LGI_HTR_ID = #{lgiHtrId}
		AND		MBR_ID = #{id}
	</update>
	
	<select id="getJoinEducationList" parameterType="string" resultType="EducationHistoryVO">
		SELECT	EH.EDU_HTR_ID educationHistoryId
				, EH.EDU_ID educationId
				, EH.MBR_ID memberId
				, EH.EDU_HTR_DT educationHistoryDate
				, EH.STAT state
				, EH.IP ip
				, EH.CMNT cmnt
				, EH.FDBK fdbk
				, EI.EDU_TTL educationTitle
				, EI.COST cost
				, EI.SRT_DATE startDate
				, EI.END_DATE endDate
		FROM	EDU_INFO EI
				, EDU_HTR EH
		WHERE	EI.EDU_ID = EH.EDU_ID
		AND		EH.MBR_ID = #{memberId}	
		AND		EH.STAT LIKE 'JOIN_CMPL'	
		AND		TO_DATE(EI.SRT_DATE,'YYYY-MM-DD') <![CDATA[<=]]> SYSDATE
		AND		(TO_DATE(EI.END_DATE,'YYYY-MM-DD') + 1) <![CDATA[>=]]> SYSDATE
	</select>
</mapper>